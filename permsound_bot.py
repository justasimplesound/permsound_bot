#!/usr/bin/env python
# coding: utf-8
import telebot
import yadisk
import flask
from telebot import types
from telebot import apihelper
import pandas as pd
import config
from datetime import datetime
import requests
import pytz
import re
import os
import markups
# import sheets
import logging
import time
# Import required modules
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from pprint import pprint
from datetime import datetime
import random

#response = requests.get(url="https://www.duckdns.org/update?domains=permsoundbot&token=dc46274d-b6a7-4280-bf5d-2eb832565282&ip=&verbose=true")
#ip = response._content.decode('utf-8').split("\n")[1]

scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
		"https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]



# Assign credentials ann path of style sheet
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open("Permsound. DB").sheet1


def new_entry(data):
	str_tags = ", ".join(data.tags)
	str_time = data.time.strftime('%d.%m.%Y, %H:%M')
	description_list = [f"–¢—ç–≥–∏: {str_tags}", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: -", f"–ò—Å—Ç–æ—Ä–∏—è: {data.description}"]
	description_text = "\n".join(description_list)

	insertRow = [data.link, data.name, data.description, str_time, str_tags, data.email ,data.tool, data.location.split(",")[0], data.location.split(",")[1], data.type]
	sheet.insert_row(insertRow, 2)





perm = pytz.timezone('Asia/Yekaterinburg')



entry_list = []


class Data:
    def __init__(self):
        self.type = ''
        self.messageId = 0
        self.fileName = ''
        self.location = ''
        self.time = ''
        self.email = ''
        self.tags = []
        self.typeFile = ''
        self.name = ''
        self.description = ''
        self.link = ''
        self.tool = "-"


apihelper.ENABLE_MIDDLEWARE = True
TOKEN = config.TOKEN
bot = telebot.TeleBot(TOKEN)
app = flask.Flask(__name__)

# apihelper.API_URL = "http://127.0.0.1:8081/bot{0}/{1}"
# bot.log_out()
WEBHOOK_HOST = '7906-212-58-120-54.eu.ngrok.io'
WEBHOOK_PORT = 8080  # 443, 80, 88 or 8443 (port need to be 'open')
WEBHOOK_LISTEN = '127.0.0.1'  # In some VPS you may need to put here the IP addr
# WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_BASE = "https://%s" % (WEBHOOK_HOST)
WEBHOOK_URL_PATH = "/%s/" % (TOKEN)

yandex = yadisk.YaDisk(token=config.YaToken)

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

# Empty webserver index, return nothing, just http 200
@app.route('/', methods=['GET', 'HEAD'])
def index():
    return 'OK'

# Process webhook calls
@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)

# file_info = bot.get_file(message.document.file_id)
def get_file_link(chat_id, file_path, ext):
        data = dataDict[chat_id]
        file_name = f"{random.randint(1000000,9999999)}.{ext}"

        downloaded_file = bot.download_file(file_path)
        bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...")
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        count_of_tries = 0
        while True:
            try:
                yandex.upload(file_name,'Permsound/' + file_name, overwrite=False)
                break
            except Exception as e:
                count_of_tries += 1
                if count_of_tries > 5:
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.")
                    break
                print(e)
                time.sleep(5)
            continue
        data.link = yandex.get_download_link("Permsound/" + file_name)
        data.link = "https://disk.yandex.ru/client/disk/Permsound?idApp=client&dialog=slider&idDialog=%2Fdisk%2FPermsound%2F" + file_name 
        print(data.link)
        os.remove(file_name)


def reject_file(message, error):
    print(error)
    bot.send_message(message.chat.id, '–í–∏–∂—É, —á—Ç–æ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª –º–Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑.')
    bot.register_next_step_handler_by_chat_id(message.chat.id, get_sound)


@bot.middleware_handler(update_types=['message'])
def set_session(bot_instance, message):
    if message.text == "/start":
        bot_instance.clear_step_handler_by_chat_id(message.chat.id)
        # greeting(message)

# C–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–∏—Å–µ–π –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dataDict = {}

@bot.message_handler(commands=['start'])
def greeting(message):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å —Å–µ–π—á–∞—Å')
    button2 = types.KeyboardButton('–£–∂–µ –∑–∞–ø–∏—Å–∞–Ω')
    markup.add(button1, button2)
    bot.send_message(message.chat.id, 
    f'''–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã *PermSound*. \U0001F385\n'''
    '''–í—Ä–µ–º—è –ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é! üé§ \n\n'''
    '''–ó–∞–ø–∏—à–∏ –∞—É–¥–∏–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.\n\n'''
    # '''–í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: *.mp3, .flac/.fla, .ogg, .aiff / .aif / .wav / .m4a*\n\n'''
    '''–ß—Ç–æ–±—ã —Å—Ç–µ—Ä–µ—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–∏—à–∏ /start''',
    parse_mode='Markdown')
    bot.register_next_step_handler_by_chat_id(message.chat.id, get_sound)

@bot.message_handler(content_type=[])
def get_sound(message):
    try:
        if message.content_type in ["voice", "audio", "document"]:
            file_id = message.json[message.content_type]["file_id"]
            file_url = bot.get_file_url(file_id)
            get_file = bot.get_file(file_id)
            if file_url.split('.')[-1] in config.allowed_formats:
                dataDict[message.chat.id] = Data
                dataDict[message.chat.id].tags = []
                dataDict[message.chat.id].link = file_url
                print("file accepted")
                get_file_link(message.chat.id, get_file.file_path, file_url.split('.')[-1])
                print(file_url)

                if message.content_type == "voice":
                    dataDict[message.chat.id].time = datetime.now(perm)
                    bot.send_message(message.from_user.id, 
                    f'''–ß—Ç–æ–±—ã –Ω–∞–Ω–µ—Å—Ç–∏ –∑–≤—É–∫ –Ω–∞ –∫–∞—Ä—Ç—É, '''
                    '''–Ω–∞–º —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è *–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã*. '''
                    '''–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –∏ –º—ã —Å—Ä–∞–∑—É –∑–∞–ø–∏—à–µ–º –µ—ë. \n\n(–í–ª–æ–∂–µ–Ω–∏—è üìé -> –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è)''', 
                    parse_mode='Markdown')
                    bot.register_next_step_handler_by_chat_id(message.chat.id, get_coordinates)
                    dataDict[message.chat.id].type = "V"             
                else: 
                    dataDict[message.chat.id].type = "NV"
                    bot.send_message(message.from_user.id, f'''–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ñ–∞–π–ª? (–≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: *02.02.2022, 02:00*)''',
                    parse_mode='Markdown')
                    bot.register_next_step_handler(message, get_datetime) 

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            else: raise Exception("Wrong file ext")
        else: raise  Exception("Wrong content type")
    except Exception as e: reject_file(message, e)


def get_coordinates(message):
    data = dataDict[message.chat.id]
    if dataDict[message.chat.id].type == 'V':
        if message.content_type == 'location':
            tup = message.location.latitude, message.location.longitude
            loc = ','.join(map(str, tup))
            data.location = loc
            bot.send_message(message.from_user.id,  f'''–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é *–ø–æ—á—Ç—É*, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ. \n
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—á—Ç—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_¬ª''', parse_mode='Markdown', reply_markup=markups.skip_mail_markup())
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_mail)
        else:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é.')
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_coordinates)
    else:
        coord = message.text
        if message.content_type == 'text' and bool(
                re.search(r"^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$",
                          coord)):
            data.location = coord
            bot.send_message(message.from_user.id, f'''–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é *–ø–æ—á—Ç—É*, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ. \n
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—á—Ç—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_¬ª''', parse_mode='Markdown', reply_markup=markups.skip_mail_markup())
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_mail)
        elif message.content_type == 'location':
            tup = message.location.latitude, message.location.longitude
            loc = ','.join(map(str, tup))
            if " " in loc: loc.remove(" ")
            data.location = loc
            bot.send_message(message.from_user.id, f'''–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é *–ø–æ—á—Ç—É*, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ. \n
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—á—Ç—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_¬ª''', parse_mode='Markdown', reply_markup=markups.skip_mail_markup())
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_mail)
        else:
            bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö.')
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_coordinates)


def get_mail(message):
    data = dataDict[message.chat.id]
    if message.content_type == 'text' and bool(re.search(r"^[\w\.\+\-]+\@[\w]+\.[a-z]{2,3}$", message.text.lower())):
        data.email = message.text.lower()
        bot.send_message(message.from_user.id, f'''–° –∫–∞–∫–æ–≥–æ *–¥–µ–≤–∞–π—Å–∞* –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ç–≤–æ–π –∑–≤—É–∫? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–µ–≥–æ –∑–≤—É—á–∞–Ω–∏—è.\n
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–≤–∞–π—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_¬ª''', parse_mode="Markdown", reply_markup=markups.skip_device_markup())
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_device)
    elif message.text.lower() == 'next':
        data.email = "-"
        bot.send_message(message.from_user.id, f'''–° –∫–∞–∫–æ–≥–æ *–¥–µ–≤–∞–π—Å–∞* –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ç–≤–æ–π –∑–≤—É–∫? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–µ–≥–æ –∑–≤—É—á–∞–Ω–∏—è.\n
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–≤–∞–π—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_¬ª''', parse_mode="Markdown", reply_markup=markups.skip_device_markup())
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_device)
    else:
        bot.send_message(message.from_user.id, '–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã.', reply_markup=markups.skip_mail_markup())
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_mail)


def get_device(message):
    if message.content_type == "text":
        data = dataDict[message.chat.id]
        data.tool = message.text
        bot.send_message(message.from_user.id, f'''–°—É–ø–µ—Ä, –æ—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ —Ç–≤–æ–π –∑–≤—É–∫: \n 
    *—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π, –ª—é–¥–∏, –ø—Ä–∏—Ä–æ–¥–∞, –º—É–∑—ã–∫–∞, –ø–æ–º–µ—â–µ–Ω–∏–µ*''', parse_mode="Markdown", reply_markup=markups.tags_markup(data))
            # bot.register_next_step_handler_by_chat_id(call.message.chat.id, get_tags)
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', parse_mode='Markdown', reply_markup=markups.skip_device_markup())
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_device)

        
def get_name(message):
    data = dataDict[message.chat.id]

    if message.content_type != 'text':
        bot.send_message(message.from_user.id, '–ù–∞–∑–æ–≤–∏ –µ—ë *—Ç–µ–∫—Å—Ç–æ–º*.', parse_mode='Markdown')
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_name)

    else:
        data.name = message.text
        bot.send_message(message.from_user.id, '–ü–æ–¥–µ–ª–∏—Å—å —Å –º–∏—Ä–æ–º, –ø–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª_–∞ –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç –∑–≤—É–∫ (–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤).')
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_description)
        
    
def get_description(message):
    data = dataDict[message.chat.id]
    
    if message.content_type != 'text':
        bot.send_message(message.from_user.id, '–≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *—Ç–µ–∫—Å—Ç*.', parse_mode='Markdown')
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_description)
    elif len(message.text) < 20:
        bot.send_message(message.from_user.id, "–ß—É—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π ü•∫")
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_description)
    else:
        data.description = message.text
        new_entry(data)
        dataDict.pop(message.chat.id, " ")
        bot.send_message(message.from_user.id, f'''–°–ø–∞—Å–∏–±–æ, —Å–∫–æ—Ä–æ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ! üìç \n
–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª, –Ω–∞–ø–∏—à–∏ /start''')


def get_datetime(message):
    f = '%d.%m.%Y, %H:%M'
    try:
        res = datetime.strptime(message.text, f)
        if res <= datetime.today():
            data = dataDict[message.chat.id]
            data.time = res
            bot.send_message(message.from_user.id, f'''–ß—Ç–æ–±—ã –Ω–∞–Ω–µ—Å—Ç–∏ –∑–≤—É–∫ –Ω–∞ –∫–∞—Ä—Ç—É, –Ω–∞–º —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è _–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã_. –ù–∞–ø—Ä–∏–º–µ—Ä, *50.450441, 30.523550* \n
–ï—Å–ª–∏ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ, –≥–¥–µ –∑–∞–ø–∏—Å–∞–ª –∑–≤—É–∫, —Ç–æ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, –∏ –º—ã —Å—Ä–∞–∑—É –∑–∞–ø–∏—à–µ–º –µ—ë. \n
(–í–ª–æ–∂–µ–Ω–∏—è üìé -> –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è)''', \
                                parse_mode='Markdown')
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_coordinates)
        else:
            bot.send_message(message.from_user.id, '–¢–≤–æ–π —Ñ–∞–π–ª –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω –≤ –±—É–¥—É—â–µ–º? üò¶')
            bot.register_next_step_handler_by_chat_id(message.chat.id, get_datetime)            
    except:
        bot.send_message(message.from_user.id, '–§–æ—Ä–º–∞—Ç —Ç–æ—á–Ω–æ –≤–µ—Ä–Ω—ã–π?')
        bot.register_next_step_handler_by_chat_id(message.chat.id, get_datetime)

@bot.callback_query_handler(func=lambda call: 'skip' in call.data)
def skip(call):
    bot.clear_step_handler_by_chat_id(call.from_user.id)
    if call.from_user.id in dataDict:
        data = dataDict[call.from_user.id]
        if "mail" in call.data:
            data.email = "-"
            bot.send_message(call.from_user.id, f'''–° –∫–∞–∫–æ–≥–æ *–¥–µ–≤–∞–π—Å–∞* –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ç–≤–æ–π –∑–≤—É–∫? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–µ–≥–æ –∑–≤—É—á–∞–Ω–∏—è.\n
–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ–≤–∞–π—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´_–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_¬ª''', parse_mode="Markdown", reply_markup=markups.skip_device_markup())
            bot.register_next_step_handler_by_chat_id(call.message.chat.id, get_device)
        elif "device" in call.data:
            data.tool = "-"
            bot.send_message(call.from_user.id, f'''–°—É–ø–µ—Ä, –æ—Å—Ç–∞–ª–æ—Å—å —á—É—Ç—å-—á—É—Ç—å. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ —Ç–≤–æ–π –∑–≤—É–∫:''',
            parse_mode="Markdown", reply_markup=markups.tags_markup(data))

    else: greeting(call.message)

@bot.callback_query_handler(func=lambda call: True)
def check_tags(call):
    if call.from_user.id in dataDict:
        if call.data == "ACCEPT":
            if len(dataDict[call.from_user.id].tags) > 0:
                bot.send_message(call.from_user.id, '–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è?')
                bot.answer_callback_query(call.id, " ")
                bot.register_next_step_handler_by_chat_id(call.message.chat.id, get_name)
                return
            else:
                bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", True)
                return

        tag = call.data
        if tag in dataDict[call.from_user.id].tags: dataDict[call.from_user.id].tags.remove(tag)
        else: dataDict[call.from_user.id].tags.append(tag)
        bot.answer_callback_query(call.id, " ")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=markups.tags_markup(dataDict[call.from_user.id]))
    else: greeting(call.message)

bot.remove_webhook()
bot.infinity_polling()

# Remove webhook, it fails sometimes the set if there is a previous webhook


# time.sleep(0.1)

# Set webhook
# print(bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH))

# if __name__ == "__main__":
# Start flask server
    # app.run(host=WEBHOOK_LISTEN,
    #         port=WEBHOOK_PORT,
    #         debug=False)

# cycle_thread = threading.Thread(target=get_file_link, kwargs={"chat_id": chat_id})
# cycle_thread.start()

